// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parse it generates an array expression 1`] = `
Node {
  "elements": Array [
    Node {
      "end": 42,
      "properties": Array [
        Node {
          "computed": false,
          "end": 21,
          "key": Node {
            "end": 13,
            "raw": "\\"tokenType\\"",
            "start": 2,
            "type": "Literal",
            "value": "tokenType",
          },
          "kind": "init",
          "method": false,
          "shorthand": false,
          "start": 2,
          "type": "Property",
          "value": Node {
            "end": 21,
            "raw": "\\"chars\\"",
            "start": 14,
            "type": "Literal",
            "value": "chars",
          },
        },
        Node {
          "computed": false,
          "end": 41,
          "key": Node {
            "end": 28,
            "raw": "\\"args\\"",
            "start": 22,
            "type": "Literal",
            "value": "args",
          },
          "kind": "init",
          "method": false,
          "shorthand": false,
          "start": 22,
          "type": "Property",
          "value": Node {
            "elements": Array [
              Node {
                "end": 38,
                "raw": "\\"hello \\"",
                "start": 30,
                "type": "Literal",
                "value": "hello ",
              },
              Node {
                "end": 40,
                "raw": "1",
                "start": 39,
                "type": "Literal",
                "value": 1,
              },
            ],
            "end": 41,
            "start": 29,
            "type": "ArrayExpression",
          },
        },
      ],
      "start": 1,
      "type": "ObjectExpression",
    },
    Node {
      "end": 85,
      "properties": Array [
        Node {
          "computed": false,
          "end": 65,
          "key": Node {
            "end": 55,
            "raw": "\\"tokenType\\"",
            "start": 44,
            "type": "Literal",
            "value": "tokenType",
          },
          "kind": "init",
          "method": false,
          "shorthand": false,
          "start": 44,
          "type": "Property",
          "value": Node {
            "end": 65,
            "raw": "\\"special\\"",
            "start": 56,
            "type": "Literal",
            "value": "special",
          },
        },
        Node {
          "computed": false,
          "end": 84,
          "key": Node {
            "end": 72,
            "raw": "\\"args\\"",
            "start": 66,
            "type": "Literal",
            "value": "args",
          },
          "kind": "init",
          "method": false,
          "shorthand": false,
          "start": 66,
          "type": "Property",
          "value": Node {
            "elements": Array [
              Node {
                "end": 81,
                "raw": "\\"world\\"",
                "start": 74,
                "type": "Literal",
                "value": "world",
              },
              Node {
                "end": 83,
                "raw": "1",
                "start": 82,
                "type": "Literal",
                "value": 1,
              },
            ],
            "end": 84,
            "start": 73,
            "type": "ArrayExpression",
          },
        },
      ],
      "start": 43,
      "type": "ObjectExpression",
    },
    Node {
      "end": 117,
      "properties": Array [
        Node {
          "computed": false,
          "end": 105,
          "key": Node {
            "end": 98,
            "raw": "\\"tokenType\\"",
            "start": 87,
            "type": "Literal",
            "value": "tokenType",
          },
          "kind": "init",
          "method": false,
          "shorthand": false,
          "start": 87,
          "type": "Property",
          "value": Node {
            "end": 105,
            "raw": "\\"done\\"",
            "start": 99,
            "type": "Literal",
            "value": "done",
          },
        },
        Node {
          "computed": false,
          "end": 116,
          "key": Node {
            "end": 112,
            "raw": "\\"args\\"",
            "start": 106,
            "type": "Literal",
            "value": "args",
          },
          "kind": "init",
          "method": false,
          "shorthand": false,
          "start": 106,
          "type": "Property",
          "value": Node {
            "elements": Array [
              Node {
                "end": 115,
                "raw": "1",
                "start": 114,
                "type": "Literal",
                "value": 1,
              },
            ],
            "end": 116,
            "start": 113,
            "type": "ArrayExpression",
          },
        },
      ],
      "start": 86,
      "type": "ObjectExpression",
    },
  ],
  "end": 118,
  "start": 0,
  "type": "ArrayExpression",
}
`;

exports[`parse produces a AST from a stache template 1`] = `
Object {
  "ases": Object {},
  "dynamicImports": Array [],
  "exports": Object {},
  "importDeclarations": Array [],
  "imports": Array [],
  "intermediate": Array [
    Object {
      "args": Array [
        "hello ",
        1,
      ],
      "tokenType": "chars",
    },
    Object {
      "args": Array [
        "world",
        1,
      ],
      "tokenType": "special",
    },
    Object {
      "args": Array [
        1,
      ],
      "tokenType": "done",
    },
  ],
  "program": Array [
    Object {
      "args": Array [
        "hello ",
        1,
      ],
      "tokenType": "chars",
    },
    Object {
      "args": Array [
        "world",
        1,
      ],
      "tokenType": "special",
    },
    Object {
      "args": Array [
        1,
      ],
      "tokenType": "done",
    },
  ],
}
`;
